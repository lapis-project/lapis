# syntax=docker/dockerfile:1

# using alpine base image to avoid `sharp` memory leaks.
# @see https://sharp.pixelplumbing.com/install#linux-memory-allocator

# base setup
FROM node:20-alpine AS base

ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable

# build
FROM base AS build

WORKDIR /app
RUN chown -R node:node /app

COPY --chown=node:node .npmrc package.json pnpm-lock.yaml ./

RUN sed -i "s/use-node-version/# use-node-version/" .npmrc

RUN pnpm fetch

COPY --chown=node:node ./ ./
RUN sed -i "s/use-node-version/# use-node-version/" .npmrc

RUN pnpm install --frozen-lockfile --prefer-offline --filter "backend"

RUN pnpm run build:backend

# serve
FROM base AS serve

WORKDIR /app
RUN chown -R node:node /app

# Copy Command for the backend code
COPY --from=build --chown=node:node /app/apps/backend /app/apps/backend
COPY --from=build --chown=node:node /app/apps/backend/dist /app/dist
COPY --from=build --chown=node:node /app/package.json /app/package.json
COPY --from=build --chown=node:node /app/node_modules /app/node_modules

# TODO: Does nothing
ENV NODE_ENV=production
# TODO: Mount as secret in so the DB password is not exposed
# RUN type=secret
ENV PGPASSWORD $PGPASSWORD
ENV BACKEND_PORT 3000

USER node
EXPOSE $BACKEND_PORT

CMD ["node", "./dist/index.js"]
