name: Build and deploy the Backend
concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}-build-deploy"
  cancel-in-progress: true
"on":
  #  push:
  #    branches:
  #      - main
  #    paths:
  #      - "apps/backend/**"
  #    tags:
  #      - 'release-prod-v\d\.'
  workflow_call: null
  workflow_dispatch: null
jobs:
  setup_workflow_env:
    runs-on: ubuntu-latest
    outputs:
      environment: "${{ steps.get_environment_from_git_ref.outputs.environment }}"
      environment_short: "${{ steps.get_environment_from_git_ref.outputs.environment_short }}"
      image_name: ""
      registry_root: "ghcr.io/${{ github.repository }}"
      default_port: "3000"
      fetch-depth: 10
      submodules: "true"
      PUBLIC_URL: "${{ vars.PUBLIC_URL_BACKEND }}"
      APP_NAME: lapis-backend
      APP_ROOT: /
    steps:
      - name: Get environment from git ref
        id: get_environment_from_git_ref
        run: |
          echo "Workflow triggered by: ${{ github.event_name }}"
          echo "Git Ref Name (Tag or Branch): ${{ github.ref_name }}"
          echo "Running on branch ${{ github.ref_name }}"

          ENV_NAME=""
          ENV_SHORT=""

          # Priority for Git Tags
          if [[ "${{ github.ref }}" == "refs/tags/"* ]]; then
            TAG_NAME="${{ github.ref_name }}"
            TAG_LOWER=$(echo "$TAG_NAME" | tr '[:upper:]' '[:lower:]')
            echo "Processing tag: $TAG_NAME"

            # Pattern 1: Explicit environment in tag name (e.g., backend-production, backend-dev-v1.2)
            if [[ "$TAG_LOWER" == backend-production || "$TAG_LOWER" == backend-prod || "$TAG_LOWER" == backend-prod-* ]]; then
              ENV_NAME="production-backend"; ENV_SHORT="prod-backend"
            elif [[ "$TAG_LOWER" == backend-dev || "$TAG_LOWER" == backend-development || "$TAG_LOWER" == backend-dev-* ]]; then
              ENV_NAME="development-backend"; ENV_SHORT="dev-backend"
            fi

          # Fallback for branch logic
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=production-backend"
            ENV_NAME="production-backend"
            ENV_SHORT="prod-backend"
            echo "environment=production-backend" >> $GITHUB_OUTPUT
            echo "environment_short=prod-backend" >> $GITHUB_OUTPUT
          else
            echo "environment=dev-backend"
            echo "environment=dev-backend" >> $GITHUB_OUTPUT
            echo "environment_short=dev-backend" >> $GITHUB_OUTPUT
          fi

          echo "environment=$ENV_NAME" >> $GITHUB_OUTPUT
          echo "environment_short=$ENV_SHORT" >> $GITHUB_OUTPUT
          echo "Final environment set to: $ENV_NAME"
          echo "Final environment_short set to: $ENV_SHORT"
  generate_workflow_vars:
    needs:
      - setup_workflow_env
    environment:
      name: "${{ needs.setup_workflow_env.outputs.environment }}"
    runs-on: ubuntu-latest
    steps:
      - name: Generate PUBLIC_URL if not set
        id: generate_public_url
        run: >
          kube_ingress_base_domain="${{ vars.KUBE_INGRESS_BASE_DOMAIN }}"

          public_url="${{ needs.setup_workflow_env.outputs.PUBLIC_URL || vars.PUBLIC_URL_BACKEND }}"

          if [ "${public_url}x" == 'x' ]

          then public_url=https://${{ needs.setup_workflow_env.outputs.environment_short
          }}.${kube_ingress_base_domain}

          fi

          echo "public_url=$public_url" >> $GITHUB_OUTPUT
    outputs:
      PUBLIC_URL: "${{ steps.generate_public_url.outputs.public_url }}"
  build-and-push-image:
    name: Build and push docker image
    needs:
      - setup_workflow_env
      - generate_workflow_vars
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: "${{ github.repository_owner }}"
          password: "${{ secrets.GITHUB_TOKEN }}"
      - name: "Extract metadata (tags, labels) for Docker"
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: >
            ghcr.io/${{ github.repository }}-backend # The container is located at the repository
            registry root at the moment.
          flavor: |
            latest=auto
          tags: |
            type=raw,value={{sha}}
            type=ref,event=branch
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile_Backend
          push: ${{ github.event_name != 'pull_request' }}
          tags: "${{ steps.meta.outputs.tags }}"
          labels: "${{ steps.meta.outputs.labels }}"
          cache-from: type=gha
          cache-to: "type=gha,mode=max"
  deploy:
    permissions:
      contents: read
      packages: write
    name: Deploy docker image
    needs:
      - setup_workflow_env
      - generate_workflow_vars
      - build-and-push-image
    uses: lapis-project/gl-autodevops-minimal-port/.github/workflows/deploy.yml@main
    secrets: inherit
    with:
      environment: "${{ needs.setup_workflow_env.outputs.environment }}"
      DOCKER_TAG: ${{ needs.setup_workflow_env.outputs.registry_root }}-backend
      APP_NAME: "${{ needs.setup_workflow_env.outputs.app_name }}"
      APP_ROOT: "${{ needs.setup_workflow_env.outputs.APP_ROOT }}"
      SERVICE_ID: "${{ vars.SERVICE_ID_BACKEND }}"
      PUBLIC_URL: "${{ needs.generate_workflow_vars.outputs.PUBLIC_URL }}"
      default_port: "${{ needs.setup_workflow_env.outputs.default_port}}"
  clean_up_cache:
    needs:
      - build-and-push-image
    runs-on: ubuntu-latest
    steps:
      - uses: MyAlbum/purge-cache@v2
        with:
          max-age: 604800
